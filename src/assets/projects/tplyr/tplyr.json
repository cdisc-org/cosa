{
  "projectInfo": {
    "projectName": "Tplyr",
    "projectOwner": "Mike Stackhouse",
    "projectContact": [
      "mike.stackhouse@atorusresearch.com"
    ],
    "projectLandingPage": "https://atorus-research.github.io/Tplyr/",
    "projectRepository": "https://github.com/atorus-research/Tplyr",
    "programmingLanguage": [
      "R"
    ],
    "openSourceLicense": [
      "MIT"
    ],
    "cdiscStandards": [
      "ADaM",
      "SDTM"
    ],
    "projectMaturity": "Stable",
    "agreeWithCdiscCodeOfEthics": true,
    "user": [
      "Clinical Programmers"
    ],
    "logoUrl": "./TplyrLogo.png"
  },
  "detailedDescription": {
    "problem": "Programming tables for clinical reports can be challenging to represent programmatically. Legacy processes can be redundant and be inflexible when new standards or data are introduced, and most legacy processes are heavily catered to organization specific standards. These standards may take the form of existing SAS macro suites that may date back decades, and in the transition to R, rebuilding these tools from scratch can be a heavy burden.",
    "solution": "Tplyr seeks to provide a solid, flexible, and robust foundation upon which new tools may be built and is designed to be a grammar of building clinical summary tables. It allows you to 'layer' your different table components together to create an output that is ready to be rendered into your clinical report.\nRedundant components can be programmatically represented, and data can be updated or swapped out without updating any of the analysis code.\n\nTplyr breaks down the problem of creating tables by decomposing tables into parts which consist of count, shift, and descriptive layers. These layers are described, then built into a singular table which still retains the metadata used to create it. This allows the user to trace through the construction of the table to verify calculations.\n\nTplyr also provides helper functions for preparing a table for display including introducing row breaks, automatically calculating row headers, and configuring row headers.",
    "openSourceConsiderations": "Tplyr was developed to be a model for open source solutions in the space. It explored the process of qualification for an open source project and includes validation documentation performed by Atorus.",
    "maintenanceModel": "Tplyr has a main branch that is used for stable version releases, and a dev branch that is used for development features and merged into the main branch regularly, along with a push to CRAN.\nBugs found in the stable version are patched in hotfixes and merged directly into the main branch. Issues can be reported in the GitHub repository. Tplyr was initially developed on AzureDevOps but is transitioning to development on GitHub",
    "projectSize": "Large - Tplyr has nearly 2000 lines of R code, not including tests, function documentation, and vignettes. Tplyr is in active development and plans for future function updates and functionality is ongoing.",
    "contributors": "Contributions are welcome as long as contributors:\n- adhere to the code of conduct found [here](https://atorus-research.github.io/Tplyr/CONTRIBUTING.html).\n- Submit a GitHub issue or pull request detailing the changes and rationale.\n- Include tests if applicable to test their changes.",
    "userDetails": "Primary users are clinical programmers who are creating tables for regulatory submissions, however knowledge of CDISC standards is not a requirement.\nIt is expected that users know the requirements for the tables they are developing and how they are calculated.",
    "preRequisites": "Tplyr relies on R >= 3.5.0. A full list of R package dependancies can be found [here](https://github.com/atorus-research/Tplyr/blob/master/DESCRIPTION).",
    "projectServiceOptions": "Tplyr is qualified by Atorus Research. Assistance to consult on how it fits in an existing reporting pipeline is available.",
    "sponsors": "Atorus Research",
    "goalsObjectives": "Tplyr seeks to provide the infrastructure for reducing redundancy across organizations when creating clinical tables. As standards for TLFs change, Tplyr hopes to provide guidance for how to represent the new tables programmatically. Furthermore, Tplyr seeks to make the traceability of the construction of a table more accessible as well by capturing and maintaining metadata about the table. This provides insight into from where the summary numbers presented in the resulting table originated. This metadata can then be leveraged in the creation of interactive tables to provide drilldown functionality. Tplyr does not focus on the presentation of a table, but rather focuses on the numeric derivations and the character formatting of numeric strings. Presentation and output of tables are left to existing, powerful libraries such as gt, huxtable, flextable, pharmaRTF, and more. ",
    "communications": "Updates for Tplyr can be followed on the GitHub page. As development shifts more from AzureDevOps to GitHub, feature changes and plans can be found in issues or projects.",
    "additonalInformation": "N.A"
  }
}